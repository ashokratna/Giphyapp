{"version":3,"sources":["components/SearchBar.js","components/GiphyListItem.js","components/GiphyList.js","App.js","serviceWorker.js","index.js"],"names":["Input","styled","input","attrs","props","type","size","SearchBar","state","searchTerm","replace","this","setState","onChange","placeholder","value","ev","handleSearchBarChange","target","React","Component","Gif","img","GiphyListItem","gifImageInfo","gif","images","fixed_height_small","src","url","alt","slug","height","width","Containergif","div","Containerimg","GiphyList","gifList","gifs","map","i","className","key","id","App","fetchGifs","fetch","then","res","json","error","alert","_","debounce","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"qkBAGA,IAAMA,EAAQC,IAAOC,MAAMC,OAAM,SAAAC,GAAK,MAAK,CACvCC,KAAO,OAEPC,KAAMF,EAAME,MAAQ,SAHVL,CAAH,KAcG,SAAAG,GAAK,OAAIA,EAAME,QAEd,SAAAF,GAAK,OAAIA,EAAME,QA8BfC,E,kDA1BX,WAAYH,GAAQ,IAAD,8BACf,cAAMA,IAEDI,MAAQ,CACTC,WAAY,IAJD,E,kEAQGA,GAClBA,EAAWC,QAAQ,KAAK,KACxBC,KAAKC,SAAS,CAAEH,eAChBE,KAAKP,MAAMS,SAASJ,K,+BAGd,IAAD,OACL,OACgB,kBAACT,EAAD,CACIc,YAAc,yBACdC,MAAUJ,KAAKH,MAAMC,WACrBI,SACI,SAACG,GAAD,OAAQ,EAAKC,sBAAsBD,EAAGE,OAAOH,c,GArBrDI,IAAMC,W,uECnB9B,IAAMC,EAAMpB,IAAOqB,IAAV,KAcMC,EAXO,SAAC,GAAa,IAC1BC,EADyB,EAAVC,IACIC,OAAOC,mBAChC,OACQ,kBAACN,EAAD,CAAKO,IAAQJ,EAAaK,IACtBC,IAAQN,EAAaO,KACrBC,OAAWR,EAAaQ,OACxBC,MAAQ,S,sOCPxB,IAAMC,EAAejC,IAAOkC,IAAV,KAMZC,EAAenC,IAAOkC,IAAV,KA6BHE,EAvBG,SAAC,GAAc,IACvBC,EADsB,EAAXC,KACIC,KAAI,SAACf,EAAKgB,GAAN,OACrB,kBAACP,EAAD,CAAcQ,UAAW,SAASC,IAAQF,GAClC,kBAACL,EAAD,KACI,kBAAC,EAAD,CACIX,IAAQA,EACRkB,IAAQlB,EAAImB,UAMhC,OACQ,yBAAKF,UAAY,2BACb,yBAAKA,UAAY,uBACb,yBAAKA,UAAY,sBACPJ,M,iBCuBfO,E,kDA9CX,aAAe,IAAD,8BACV,gBACKrC,MAAQ,CACT+B,KAAM,IAHA,E,gEAQV5B,KAAKmC,UAAU,Q,gCAGTrC,GAAa,IAAD,OAClB,OAAOsC,MAAM,0CAAD,OAA2CtC,EAA3C,oBAhBJ,mCAgBI,cACPuC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACEA,EAAKC,MACLC,MAAM,SAEN,EAAKxC,SAAS,CACV2B,KAAMW,S,+BAMhB,IAAD,OACCJ,EAAYO,IAAEC,UAAS,SAAC7C,GAAiB,EAAKqC,UAAUrC,KAAe,KAE7E,OAAKE,KAAKH,MAAM+B,KAAKgB,KAIjB,yBAAKb,UAAY,qBACb,kBAAC,EAAD,CAAW7B,SACP,SAACJ,GAAD,OAAgBqC,EAAUrC,MAE9B,yBAAKiC,UAAY,WACb,kBAAC,EAAD,CAAWH,KAAS5B,KAAKH,MAAM+B,KAAKgB,QAEpC,wCAAa,gDAVd,S,GA9BDpC,IAAMC,WCGJoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAApB,GACLqB,QAAQrB,MAAMA,EAAMsB,c","file":"static/js/main.8fcad220.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Input = styled.input.attrs(props => ({\r\n    type : \"text\",\r\n  \r\n    size: props.size || \"1em\",\r\n  }))`\r\n\r\n    color: palevioletred;\r\n    font-size: 1em;\r\n    border: 2px solid palevioletred;\r\n    border-radius: 3px;\r\n    \r\n    width: 1024px;\r\n  \r\n    /* here we use the dynamically computed prop */\r\n    margin: ${props => props.size};\r\n    margin-top: 40px;\r\n    padding: ${props => props.size};\r\n  `;\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            searchTerm: ''\r\n        }\r\n    }\r\n\r\n    handleSearchBarChange(searchTerm) {     \r\n        searchTerm.replace(/ /g,\"+\");    \r\n        this.setState({ searchTerm })\r\n        this.props.onChange(searchTerm)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n                        <Input\r\n                            placeholder = \"Search all the GIFs...\"\r\n                            value = { this.state.searchTerm }\r\n                            onChange = {\r\n                                (ev) => this.handleSearchBarChange(ev.target.value)\r\n                        }/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Gif = styled.img`\r\n`;\r\n\r\nconst GiphyListItem = ({ gif }) => {\r\n    const gifImageInfo = gif.images.fixed_height_small\r\n    return ( \r\n            <Gif src = { gifImageInfo.url }\r\n                alt = { gifImageInfo.slug }\r\n                height = { gifImageInfo.height }\r\n                width = \"125\" >\r\n            </Gif>\r\n    )\r\n}\r\n\r\nexport default GiphyListItem","import React from 'react'\r\nimport GiphyListItem from './GiphyListItem';\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst Containergif = styled.div`\r\n    margin: 10px;\r\n    border: 1px solid;\r\n    border-radius: 3px;\r\n`;\r\n\r\nconst Containerimg = styled.div`\r\n    margin : auto;\r\n`;\r\n\r\n\r\n\r\nconst GiphyList = ({ gifs }) => {\r\n    const gifList = gifs.map((gif, i) =>\r\n        <Containergif className =\"column\" key = { i }>            \r\n                <Containerimg>\r\n                    <GiphyListItem \r\n                        gif = { gif }\r\n                        key = { gif.id }\r\n                    />\r\n                </Containerimg>             \r\n        </Containergif>\r\n    )\r\n\r\n    return ( \r\n            <div className = \"ui column centered grid\" >\r\n                <div className = \"sixteen wide column\" >\r\n                    <div className = \"ui six column grid\" > \r\n                            { gifList }           \r\n                    </div> \r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default GiphyList","import React from 'react';\nimport SearchBar from './components/SearchBar';\nimport GiphyList from './components/GiphyList';\nimport _ from 'lodash';\n\n\nconst API_KEY = \"ITvMVEdFm11v0QN6zBNNia6xEoq0t8Zy\";\n\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            gifs: {}\n        };\n    }\n\n    componentDidMount() {\n        this.fetchGifs(\"hi\");\n    }\n\n    fetchGifs(searchTerm) {\n        return fetch(`https://api.giphy.com/v1/gifs/search?q=${searchTerm}&api_key=${API_KEY}&limit=25`)\n            .then(res => res.json())\n            .then(json => {\n                if (json.error) {\n                    alert(\"Error\")\n                } else {\n                    this.setState({\n                        gifs: json\n                    })\n                }\n            })\n    }\n\n    render() {\n        const fetchGifs = _.debounce((searchTerm) => { this.fetchGifs(searchTerm) }, 200)\n\n        if (!this.state.gifs.data) {\n            return null\n        } else {\n            return ( \n            <div className = \"ui grid container\" >\n                <SearchBar onChange = {\n                    (searchTerm) => fetchGifs(searchTerm)\n                }/>\n                <div className = \"ui grid\" >\n                    <GiphyList gifs = { this.state.gifs.data }/> \n                </div>\n                    <h5> You are <strong>beautiful!</strong></h5> \n                </div >\n            );\n        }\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}